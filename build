#!/usr/bin/env python

import sys
from subprocess import call


# Example cmds: build --app ride --store samsung --type release --plus
# will run ./gradlew -a MapmyrideplusSamsungRelease

class BuildData(object):
    def __init__(self, name, shortName):
        self.name = name
        self.shortName = shortName

    def isBuild(self, arg):
        if arg == self.name or self.shortName in arg:
            return self

        return None

class FitnessBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "fitness", "fi")

class HikeBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "hike", "hi")

class RideBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "ride", "ri")

class RunBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "run", "ru")

class WalkBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "walk", "wa")

class DogWalkBuild(BuildData):
    def __init__(self):
        BuildData.__init__(self, "dogwalk", "dw")
    
def buildAndInstall(build, launch = True, runAsPlus = False):
    cmd = "installMapmy" + build.name + ("Plus" if runAsPlus else "") + _store + _buildType
    call(["./gradlew", "-a", cmd])

    if launch:
        call(["adb", "shell", "am", "start", "-n", "com.mapmy" + build.name + ".android2" + (".debug" if _isDebug else "") + "/com.mapmyfitness.android.activity.Launcher"])
    
_types = [ FitnessBuild(), HikeBuild(), RideBuild(), RunBuild(), WalkBuild(), DogWalkBuild() ]
_builds = []

_isPlus = False
_store = "Google"
_buildType = "Debug"
_isDebug = (_buildType == "Debug")

_buildAll = False

for i in range(1, len(sys.argv)):
    val = sys.argv[i]

    for t in _types:
        buildType = t.isBuild(val)
        if buildType is not None:
            _builds.append(buildType)
            continue

    if val == "all":
        _buildAll = True
        continue

    if "-p" in val:
        _isPlus = True
        continue

    if "--store" in val:
        i = i + 1
        _store = sys.argv[i].capitalize()
        continue

    if "-d" in val:
        _buildType = "Debug"
        continue

    if "-b" in val:
        _buildType = "Beta"
        _isDebug = False
        continue

    if "-r" in val:
        _buildType = "Release"
        _isDebug = False
        continue

if _buildAll:
    for i, build in enumerate(_types):
        buildAndInstall(build, launch = (i == 0))

        if build.name != "dogwalk":
            buildAndInstall(build, runAsPlus = True)
        
else :
    if len(_builds) == 0:
        build = WalkBuild()
        print "Flavor type not supplied. Defaulting to Mapmy" + build.name + _store + _buildType
        buildAndInstall(build, True)
    else:
        for i, build in enumerate(_builds):
            buildAndInstall(build, launch = (i == 0), runAsPlus = _isPlus)

